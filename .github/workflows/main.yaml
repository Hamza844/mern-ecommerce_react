name: Deploy React MERN Application

on:
  push:
    branches:
      - main

env:
  NODE_ENV: production
  COMPOSE_BAKE: true  # Better build performance

jobs:
  build:
    name: üß± Build App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Verify Docker
        run: docker --version && docker compose version

      # Fix for React peer dependency conflict
      - name: Resolve frontend dependencies
        working-directory: ./frontend
        run: |
          npm install --legacy-peer-deps
          npm run build

      - name: Build frontend image
        run: docker compose -f ./docker-compose.yaml build frontend

      - name: Build backend
        run: docker compose -f ./docker-compose.yaml build backend

  scan-files:
    name: üîç Scan Source Code
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies with legacy peer deps
        run: |
          npm install --prefix frontend --legacy-peer-deps
          npm install --prefix backend

      - name: Run ESLint
        run: |
          npx --prefix frontend eslint . || true
          npx --prefix backend eslint . || true

  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: scan-files
    steps:
      - uses: actions/checkout@v3

      - name: Run tests
        run: |
          docker compose -f ./docker-compose.yaml run --rm frontend npm test -- --watchAll=false || true
          docker compose -f ./docker-compose.yaml run --rm backend npm test || true

  scan-docker:
    name: üê≥ Docker Image Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Rebuild images
        run: |
          docker compose -f ./docker-compose.yaml build
          
      - name: Scan images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'frontend:latest,backend:latest'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'

  push-image:
    name: ‚òÅÔ∏è Push Docker Images
    runs-on: ubuntu-latest
    needs: scan-docker
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push images
        run: |
          docker tag frontend:latest ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest
          docker tag backend:latest ${{ secrets.DOCKER_HUB_USERNAME }}/backend:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/backend:latest

  deploy:
    name: üöÄ Deploy to EC2 Server
    runs-on: ubuntu-latest
    needs: push-image
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/ubuntu/mern-ecommerce
            git pull origin main
            docker compose down
            docker compose pull
            docker compose up -d --build
            docker exec backend npm run seed